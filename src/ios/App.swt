/**
 A representation of a Pet.
 
 This class encapsulates the properties and behaviors common to pets.
 
 - Author: Ben
 - Version: 1.0
 */

class Kitten {
    var name: String
    var color: String
    var age: Int
    var weight: Double // in kg
    var isAdopted: Bool

    init(name: String, color: String, age: Int, weight: Double, isAdopted: Bool = false) {
        self.name = name
        self.color = color
        self.age = age // age in months for kittens
        self.weight = weight
        self.isAdopted = isAdopted
    }

    func meow() {
        print("\(name) says: Meow!")
    }

    func describe() -> String {
        let adoptedStatus = isAdopted ? "adopted" : "not adopted"
        return "\(name) is a \(color) kitten, \(age) months old, weighs \(weight)kg and is \(adoptedStatus)."
    }
}

// Usage
let whiskers = Kitten(name: "Whiskers", color: "gray", age: 3, weight: 0.5)
whiskers.meow()
print(whiskers.describe())


class Pet {
    
    /// Represents the name of the pet.
    private(set) var name: String
    
    /// Represents the age of the pet.
    private(set) var age: Int
    
    /// Indicates whether the pet is adopted.
    private(set) var isAdopted: Bool
    
    /**
     Initializes a new Pet with the given properties.
     
     - Parameters:
        - name: The name of the pet.
        - age: The age of the pet.
        - isAdopted: A Boolean value indicating whether the pet has been adopted.
     */
    init(name: String, age: Int, isAdopted: Bool) {
        self.name = name
        self.age = age
        self.isAdopted = isAdopted
    }
    
    /**
     A description of the pet.
     
     - Returns: A string representation of the pet.
     */
    func describe() -> String {
        return "\(name) is \(age) years old. \(isAdopted ? "Adopted" : "Not adopted")"
    }
}



// Demo
let whiskers = Pet(name: "Whiskers", age: 3, isAdopted: false)
print(whiskers.describe())

let buster = Pet(name: "Buster", age: 5, isAdopted: true)
print(buster.describe())

